generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id        Int       @id @default(autoincrement())
  email          String    @unique
  password_hash  String
  phone_number   String?   @db.VarChar(20)
  first_name     String?   @db.VarChar(50)
  last_name      String?   @db.VarChar(50)
  profile_picture String?  @db.VarChar(255)
  created_at     DateTime  @default(now())
  orders         Order[]
  orderHistory   OrderHistory[]

  @@map("Users")
}

model MenuItem {
  item_id       Int         @id @default(autoincrement())
  name          String      @db.VarChar(255)
  description   String?     @db.Text
  price         Decimal     @db.Decimal(10, 2)
  image_url     String?     @db.VarChar(255)
  is_available  Boolean     @default(true)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  orderItems    OrderItem[]

  @@map("MenuItems")
}

model Order {
  order_id      Int            @id @default(autoincrement())
  user_id       Int
  order_status  OrderStatus    @default(CART)
  total_price   Decimal        @db.Decimal(10, 2) @default(0)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  user          User           @relation(fields: [user_id], references: [user_id])
  orderItems    OrderItem[]
  orderHistory  OrderHistory[]

  @@map("Orders")
}

model OrderItem {
  order_item_id   Int      @id @default(autoincrement())
  order_id        Int
  item_id         Int
  quantity        Int
  price_at_time   Decimal  @db.Decimal(10, 2) // Harga saat pemesanan
  subtotal        Decimal  @db.Decimal(10, 2) // quantity * price_at_time
  customizations  String?  @db.Text
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  order           Order    @relation(fields: [order_id], references: [order_id])
  menuItem        MenuItem @relation(fields: [item_id], references: [item_id])

  @@map("OrderItems")
}

enum OrderStatus {
  CART        // Masih dalam keranjang
  PENDING     // Menunggu konfirmasi
  CONFIRMED   // Pesanan dikonfirmasi
  PREPARING   // Sedang disiapkan
  READY       // Siap diambil/diantar
  COMPLETED   // Selesai
  CANCELLED   // Dibatalkan
}

model OrderHistory {
  history_id Int      @id @default(autoincrement())
  user_id    Int
  order_id   Int
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [user_id])
  order      Order    @relation(fields: [order_id], references: [order_id])

  @@map("OrderHistory")
}
